// Generated by gencpp from file srl_laser_segmentation/LaserscanSegment.msg
// DO NOT EDIT!


#ifndef SRL_LASER_SEGMENTATION_MESSAGE_LASERSCANSEGMENT_H
#define SRL_LASER_SEGMENTATION_MESSAGE_LASERSCANSEGMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace srl_laser_segmentation
{
template <class ContainerAllocator>
struct LaserscanSegment_
{
  typedef LaserscanSegment_<ContainerAllocator> Type;

  LaserscanSegment_()
    : label(0)
    , measurement_indices()  {
    }
  LaserscanSegment_(const ContainerAllocator& _alloc)
    : label(0)
    , measurement_indices(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _label_type;
  _label_type label;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _measurement_indices_type;
  _measurement_indices_type measurement_indices;





  typedef boost::shared_ptr< ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator> const> ConstPtr;

}; // struct LaserscanSegment_

typedef ::srl_laser_segmentation::LaserscanSegment_<std::allocator<void> > LaserscanSegment;

typedef boost::shared_ptr< ::srl_laser_segmentation::LaserscanSegment > LaserscanSegmentPtr;
typedef boost::shared_ptr< ::srl_laser_segmentation::LaserscanSegment const> LaserscanSegmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace srl_laser_segmentation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'srl_laser_segmentation': ['/home/wwh/qqq/src/spencer_people_tracking/detection/laser_detectors/srl_laser_segmentation/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ceb0bfb38ee913705c3016ba43e532fb";
  }

  static const char* value(const ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xceb0bfb38ee91370ULL;
  static const uint64_t static_value2 = 0x5c3016ba43e532fbULL;
};

template<class ContainerAllocator>
struct DataType< ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srl_laser_segmentation/LaserscanSegment";
  }

  static const char* value(const ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The segment label assigned to this set of laser points, usually unique per sensor_msgs/Laserscan.\n\
# If the LaserscanSegmentation message is used to annotate groundtruth person tracks, each label\n\
# corresponds to the ID of a tracked person.\n\
# Note that laser points which are considered as background are not part of any LaserscanSegment!\n\
int16       label\n\
\n\
# Indices of the measurements in the sensor_msgs/Laserscan ranges[] and intensities[] arrays\n\
# that are part of this segment. For example, if measurement_indices contains the values\n\
# 0, 1 and 2 and the value of 'label' is 16, then the first three laser measurements (usually the\n\
# three left-most laser points in polar coordinates) are assigned to segment 16.\n\
uint16[]    measurement_indices\n\
";
  }

  static const char* value(const ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.measurement_indices);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaserscanSegment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srl_laser_segmentation::LaserscanSegment_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<int16_t>::stream(s, indent + "  ", v.label);
    s << indent << "measurement_indices[]" << std::endl;
    for (size_t i = 0; i < v.measurement_indices.size(); ++i)
    {
      s << indent << "  measurement_indices[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.measurement_indices[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRL_LASER_SEGMENTATION_MESSAGE_LASERSCANSEGMENT_H
