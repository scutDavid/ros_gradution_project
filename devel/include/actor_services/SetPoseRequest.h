// Generated by gencpp from file actor_services/SetPoseRequest.msg
// DO NOT EDIT!


#ifndef ACTOR_SERVICES_MESSAGE_SETPOSEREQUEST_H
#define ACTOR_SERVICES_MESSAGE_SETPOSEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace actor_services
{
template <class ContainerAllocator>
struct SetPoseRequest_
{
  typedef SetPoseRequest_<ContainerAllocator> Type;

  SetPoseRequest_()
    : set_flag(false)
    , new_x(0.0)
    , new_y(0.0)  {
    }
  SetPoseRequest_(const ContainerAllocator& _alloc)
    : set_flag(false)
    , new_x(0.0)
    , new_y(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _set_flag_type;
  _set_flag_type set_flag;

   typedef double _new_x_type;
  _new_x_type new_x;

   typedef double _new_y_type;
  _new_y_type new_y;





  typedef boost::shared_ptr< ::actor_services::SetPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actor_services::SetPoseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetPoseRequest_

typedef ::actor_services::SetPoseRequest_<std::allocator<void> > SetPoseRequest;

typedef boost::shared_ptr< ::actor_services::SetPoseRequest > SetPoseRequestPtr;
typedef boost::shared_ptr< ::actor_services::SetPoseRequest const> SetPoseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::actor_services::SetPoseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::actor_services::SetPoseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace actor_services

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::actor_services::SetPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actor_services::SetPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actor_services::SetPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actor_services::SetPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actor_services::SetPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actor_services::SetPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::actor_services::SetPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6146332decaacb7b17a1e1e01368bdf9";
  }

  static const char* value(const ::actor_services::SetPoseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6146332decaacb7bULL;
  static const uint64_t static_value2 = 0x17a1e1e01368bdf9ULL;
};

template<class ContainerAllocator>
struct DataType< ::actor_services::SetPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actor_services/SetPoseRequest";
  }

  static const char* value(const ::actor_services::SetPoseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::actor_services::SetPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool set_flag\n\
float64 new_x\n\
float64 new_y\n\
\n\
";
  }

  static const char* value(const ::actor_services::SetPoseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::actor_services::SetPoseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.set_flag);
      stream.next(m.new_x);
      stream.next(m.new_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPoseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actor_services::SetPoseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::actor_services::SetPoseRequest_<ContainerAllocator>& v)
  {
    s << indent << "set_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_flag);
    s << indent << "new_x: ";
    Printer<double>::stream(s, indent + "  ", v.new_x);
    s << indent << "new_y: ";
    Printer<double>::stream(s, indent + "  ", v.new_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTOR_SERVICES_MESSAGE_SETPOSEREQUEST_H
